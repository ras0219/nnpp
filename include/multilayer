#ifndef _NNPP_MULTILAYER_HPP_
#define _NNPP_MULTILAYER_HPP_

#include <armadillo>

namespace nnpp {

  template<class L1, class L2>
  struct multilayer {
    typedef typename L1::input_type     input_type;
    typedef typename L2::output_type    output_type;
    typedef typename L2::in_error_type  in_error_type;
    typedef typename L1::out_error_type out_error_type;

    typedef typename L1::cref_input_type     cref_input_type;
    typedef typename L2::cref_output_type    cref_output_type;
    typedef typename L2::cref_in_error_type  cref_in_error_type;
    typedef typename L1::cref_out_error_type cref_out_error_type;

    struct full_output_type {
      typename L1::full_output_type first;
      typename L2::full_output_type second;
    };
    typedef const full_output_type& cref_full_output_type;
    static cref_output_type final_output(cref_full_output_type o);

    multilayer(std::size_t inner_param,
               std::size_t middle_param,
               std::size_t outer_param);

    multilayer(const L1& l1_old, const L2& l2_old);

    // Supervised training according to specified input and desired output
    out_error_type train(cref_input_type in,
                         cref_output_type desired);

    // Supervised training, eliding the output evaluation
    out_error_type train(cref_input_type in,
                         cref_full_output_type out,
                         cref_output_type desired);

    // Evaluate from an input
    output_type eval(cref_input_type in);

    // Evaluate from an input, preserving inner outputs
    full_output_type eval_full(cref_input_type in);

    // Evaluate from an input and return all intermediary results.
    // Also eliding the extension of the input vector by 1
    // output_type eval_full_ex(const input_type& in);

    // Retrieve number of inputs
    std::size_t inputs();

    // Retrieve number of outputs
    std::size_t outputs();

    // Backpropagate the given input, ouput, and error values.
    // Note: the input vector must be extended by 1.
    out_error_type backpropagate(cref_input_type in,
                                 cref_full_output_type out,
                                 cref_in_error_type err);

    // Internal layer 1
    L1 l1;
    // Internal layer 2
    L2 l2;
  };

}

#include "multilayer_def.hpp"

#endif

// Local Variables:
// mode: c++
// End:
